name: 'My Composite Action'
description: 'Combines multiple steps'
runs:
  using: "composite"
  steps:
    - name: 密匙检测
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE"
        if [[ -z "${{ env.REPO_TOKEN }}" ]]; then
          echo -e "\033[31m 您没有设置仓库密匙，请按教程设置好密匙再来 \033[0m\n"
          echo -e "\033[31m REPO_TOKEN密匙制作教程：https://git.io/jm.md \033[0m\n"
          exit 1
        fi
        curl -s -H "Authorization: Bearer ${{ env.REPO_TOKEN }}" https://api.github.com/repos/281677160/common/releases/tags/API > mishi
        if ! grep -E "assets|users" mishi &> /dev/null; then
          echo -e "\033[31m 您的密匙不正确或已过期，请按教程设置好密匙再来 \033[0m\n"
          echo -e "\033[31m REPO_TOKEN密匙制作教程：https://git.io/jm.md \033[0m\n"
          exit 1
        fi
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: 判断启动方式和变量
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE"
        if [[ -d "build" ]]; then
          rm -rf operates
          cp -Rf build operates
          COMPILE_PATH="$GITHUB_WORKSPACE/operates/${FOLDER_NAME}"
        fi

        case "${{ github.event_name }}" in
          "push")
            if [[ "${{ github.event.head_commit }}" != "null" && -f "${COMPILE_PATH}/relevance/settings.ini" ]]; then
              source "${COMPILE_PATH}/relevance/settings.ini"
              echo "ERRUN_NUMBER=${ERRUN_NUMBER}" >> "$GITHUB_ENV"
            fi
            ;;
          "workflow_dispatch")
            if [[ -f "${COMPILE_PATH}/settings.ini" ]]; then
              SOURCE_CODE=$(grep '^SOURCE_CODE=' "${COMPILE_PATH}/settings.ini" | awk -F'"' '{print $2}')
              COMPILATION_INFORMATION=$(grep '^COMPILATION_INFORMATION=' "${COMPILE_PATH}/settings.ini" | awk -F'"' '{print $2}')
            fi
            REPO_BRANCH="${{ github.event.inputs.REPO_BRANCH }}"
            CONFIG_FILE="${{ github.event.inputs.CONFIG_FILE }}"
            INFORMATION_NOTICE="${{ github.event.inputs.FOLDER_NAME }}"
            RETAIN_MINUTE="${{ github.event.inputs.RETAIN_MINUTE }}"
            KEEP_LATEST="${{ github.event.inputs.KEEP_LATEST }}"
            SSH_ACTION="${{ github.event.inputs.SSH_ACTION }}"
            UPLOAD_FIRMWARE="${{ github.event.inputs.UPLOAD_FIRMWARE }}"
            UPLOAD_RELEASE="${{ github.event.inputs.UPLOAD_RELEASE }}"
            CACHEWRTBUILD_SWITCH="${{ github.event.inputs.CACHEWRTBUILD_SWITCH }}"
            UPDATE_FIRMWARE_ONLINE="${{ github.event.inputs.UPDATE_FIRMWARE_ONLINE }}"
            ;;
          *)
            if [[ -f "${COMPILE_PATH}/settings.ini" ]]; then
              source "${COMPILE_PATH}/settings.ini"
            fi
            ;;
        esac

        VARIABLES=(
          "SOURCE_CODE" "REPO_BRANCH" "INFORMATION_NOTICE"
          "RETAIN_MINUTE" "KEEP_LATEST" "SSH_ACTION"
          "UPLOAD_FIRMWARE" "UPLOAD_RELEASE" "CACHEWRTBUILD_SWITCH"
          "UPDATE_FIRMWARE_ONLINE"
        )
        for var in "${VARIABLES[@]}"; do
          echo "${var}=${!var}" >> "$GITHUB_ENV"
        done

        echo "GITHUB_LINK=https://github.com/${{github.repository}}" >> "$GITHUB_ENV"
        echo "GIT_ACTOR=${{github.actor}}" >> "$GITHUB_ENV"
        echo "WAREHOUSE_MAN=${GIT_REPOSITORY##*/}" >> "$GITHUB_ENV"
        echo "RUN_NUMBER=${{github.run_number}}" >> "$GITHUB_ENV"
        echo "GIT_REFNAME=${{ github.ref_name }}" >> "$GITHUB_ENV"
        echo "COMPILATION_INFORMATION=${COMPILATION_INFORMATION}" >> "$GITHUB_ENV"
        echo "CONFIG_FILE=${CONFIG_FILE}" >> "$GITHUB_ENV"

        PATHS=(
          "HOME_PATH=$GITHUB_WORKSPACE/openwrt"
          "OPERATES_PATH=$GITHUB_WORKSPACE/operates"
          "COMPILE_PATH=${COMPILE_PATH}"
          "BUILD_DIY=${COMPILE_PATH}/diy"
          "BUILD_FILES=${COMPILE_PATH}/files"
          "BUILD_PATCHES=${COMPILE_PATH}/patches"
          "BUILD_PARTSH=${COMPILE_PATH}/diy-part.sh"
          "BUILD_SETTINGS=${COMPILE_PATH}/settings.ini"
          "MYCONFIG_FILE=${COMPILE_PATH}/seed/${CONFIG_FILE}"
        )
        for path in "${PATHS[@]}"; do
          echo "${path}" >> "$GITHUB_ENV"
        done

    - name: 整理个别变量
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE"
        LUCI_EDITION=$(echo "${REPO_BRANCH}" | sed 's/openwrt-//g')
        echo "DIY_WORK=${FOLDER_NAME}$(echo "${LUCI_EDITION}" | sed "s/\.//g" | sed "s/\-//g")" >> "$GITHUB_ENV"
        if [[ "${SOURCE_CODE}" == "COOLSNOWWOLF" ]]; then
          echo "LUCI_EDITION=23.05" >> "$GITHUB_ENV"
        fi

        case "${INFORMATION_NOTICE,,}" in
          *"关闭"*|*"false"*)
            echo "INFORMATION_NOTICE=false" >> "$GITHUB_ENV"
            ;;
          *"tg"*|*"telegram"*)
            echo "INFORMATION_NOTICE=TG" >> "$GITHUB_ENV"
            ;;
          *"push"*|*"pushplus"*)
            echo "INFORMATION_NOTICE=PUSH" >> "$GITHUB_ENV"
            ;;
          *)
            echo "INFORMATION_NOTICE=false" >> "$GITHUB_ENV"
            ;;
        esac

    - name: 运行其他变量
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE"
        bash <(curl -fsSL https://raw.githubusercontent.com/281677160/common/main/custom/first.sh)
        if [[ $? -ne 0 ]];then
            echo -e "\033[31m first.sh文件运行失败 \033[0m\n"
            exit 1
        fi

    - name: 运行其他变量
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE"
        bash $COMMON_SH Diy_variable
        
branding:
  icon: "terminal"
  color: "gray-dark"
