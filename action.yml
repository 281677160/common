name: 'My Composite Action'
description: 'Combines multiple steps'
runs:
  using: "composite"
  steps:
    - name: 密匙检测（密匙为空则退出）
      shell: bash
      run: |
        cd ${GITHUB_WORKSPACE}
        if [[ -n "${{ env.REPO_TOKEN }}" ]]; then
          curl -s -H "Authorization: Bearer ${{ env.REPO_TOKEN }}" https://api.github.com/repos/281677160/common/releases/tags/API > mishi
          if [[ `grep -c "Bad credentials" mishi` -ge '1' ]]; then
            echo -e "\033[31m 您的密匙不正确或已过期，请按教程设置好密匙再来 \033[0m"
            echo -e "\033[31m REPO_TOKEN密匙制作教程：https://git.io/jm.md \033[0m"
            exit 1
          fi
        elif [[ -z "${{ env.REPO_TOKEN }}" ]]; then
          echo -e "\033[31m 您没有设置仓库密匙，请按教程设置好密匙再来 \033[0m"
          echo -e "\033[31m REPO_TOKEN密匙制作教程：https://git.io/jm.md \033[0m"
          exit 1
        fi
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: 密匙检测（密匙为空则退出）
      shell: bash
      run: |
        cd ${GITHUB_WORKSPACE}
        
        if [[ -d "build" ]]; then
          rm -rf operates
          cp -Rf build ${GITHUB_WORKSPACE}/operates
          COMPILE_PATH="$GITHUB_WORKSPACE/operates/${FOLDER_NAME}"
        fi
        
        if [[ "${{ github.event_name }}" == "push" && [[ "${{ github.event.head_commit }}" != "null" ]]; then
          echo "push"
          if [[ -f "${COMPILE_PATH}/relevance/settings.ini" ]]; then
            source ${COMPILE_PATH}/relevance/settings.ini
          fi
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "workflow_dispatch"
          if [[ -f "${COMPILE_PATH}/settings.ini" ]]; then
            SOURCE_CODE="$(grep '^SOURCE_CODE=' "${COMPILE_PATH}/settings.ini" | awk -F'"' '{print $2}')"
            COMPILATION_INFORMATION="$(grep '^COMPILATION_INFORMATION=' "${COMPILE_PATH}/settings.ini" | awk -F'"' '{print $2}')"
          fi
          REPO_BRANCH="${{ github.event.inputs.REPO_BRANCH }}"
          CONFIG_FILE="${{ github.event.inputs.CONFIG_FILE }}"
          INFORMATION_NOTICE="${{ github.event.inputs.FOLDER_NAME }}"
          RETAIN_MINUTE="${{ github.event.inputs.RETAIN_MINUTE }}"
          KEEP_LATEST="${{ github.event.inputs.KEEP_LATEST }}"
          SSH_ACTION="${{ github.event.inputs.SSH_ACTION }}"
          UPLOAD_FIRMWARE="${{ github.event.inputs.UPLOAD_FIRMWARE }}"
          UPLOAD_RELEASE="${{ github.event.inputs.UPLOAD_RELEASE }}"
          CACHEWRTBUILD_SWITCH="${{ github.event.inputs.CACHEWRTBUILD_SWITCH }}"
          UPDATE_FIRMWARE_ONLINE="${{ github.event.inputs.UPDATE_FIRMWARE_ONLINE }}"
        else
          echo "other"
          if [[ -f "${COMPILE_PATH}/settings.ini" ]]; then
            source ${COMPILE_PATH}/settings.ini
          fi
        fi
        
        echo "SOURCE_CODE=${SOURCE_CODE}" >> ${GITHUB_ENV}
        echo "REPO_BRANCH=${REPO_BRANCH}" >> ${GITHUB_ENV}
        echo "INFORMATION_NOTICE=${INFORMATION_NOTICE}" >> ${GITHUB_ENV}
        echo "RETAIN_MINUTE=${RETAIN_MINUTE}" >> ${GITHUB_ENV}
        echo "KEEP_LATEST=${KEEP_LATEST}" >> ${GITHUB_ENV}
        echo "SSH_ACTION=${SSH_ACTION}" >> ${GITHUB_ENV}
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> ${GITHUB_ENV}
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> ${GITHUB_ENV}
        echo "CACHEWRTBUILD_SWITCH=${CACHEWRTBUILD_SWITCH}" >> ${GITHUB_ENV}
        echo "UPDATE_FIRMWARE_ONLINE=${UPDATE_FIRMWARE_ONLINE}" >> ${GITHUB_ENV}
        echo "GITHUB_LINK=https://github.com/${{github.repository}}" >> ${GITHUB_ENV}
        echo "GIT_ACTOR=${{github.actor}}" >> ${GITHUB_ENV}
        echo "WAREHOUSE_MAN=${GIT_REPOSITORY##*/}" >> ${GITHUB_ENV}
        echo "RUN_NUMBER=${{github.run_number}}" >> ${GITHUB_ENV}
        echo "GIT_REFNAME=${{ github.ref_name }}" >> ${GITHUB_ENV}
        echo "COMPILATION_INFORMATION=${COMPILATION_INFORMATION}" >> ${GITHUB_ENV}
        echo "CONFIG_FILE=${CONFIG_FILE}" >> ${GITHUB_ENV}

        echo "HOME_PATH=$GITHUB_WORKSPACE/openwrt" >> ${GITHUB_ENV}
        echo "OPERATES_PATH=$GITHUB_WORKSPACE/operates" >> ${GITHUB_ENV}
        echo "COMPILE_PATH=${COMPILE_PATH}" >> ${GITHUB_ENV}
        echo "BUILD_DIY=${COMPILE_PATH}/diy" >> ${GITHUB_ENV}
        echo "BUILD_FILES=${COMPILE_PATH}/files" >> ${GITHUB_ENV}
        echo "BUILD_PATCHES=${COMPILE_PATH}/patches" >> ${GITHUB_ENV}
        echo "BUILD_PARTSH=${COMPILE_PATH}/diy-part.sh" >> ${GITHUB_ENV}
        echo "BUILD_SETTINGS=${COMPILE_PATH}/settings.ini" >> ${GITHUB_ENV}
        echo "MYCONFIG_FILE=${COMPILE_PATH}/seed" >> ${GITHUB_ENV}

    - name: 密匙检测（密匙为空则退出）
      shell: bash
      run: |
        cd ${GITHUB_WORKSPACE}
        LUCI_EDITION="$(echo "${REPO_BRANCH}" |sed 's/openwrt-//g')"
        echo "DIY_WORK=${FOLDER_NAME}$(echo "${LUCI_EDITION}" |sed "s/\.//g" |sed "s/\-//g")" >> ${GITHUB_ENV}
        if [[ "${SOURCE_CODE}" == "COOLSNOWWOLF" ]]; then
          echo "LUCI_EDITION=23.05" >> ${GITHUB_ENV}
        fi

        if [[ "${INFORMATION_NOTICE}" =~ (关闭|false) ]]; then
          echo "INFORMATION_NOTICE=false" >> ${GITHUB_ENV}
        elif [[ -n "$(echo "${INFORMATION_NOTICE}" |grep -i 'TG\|telegram')" ]]; then
          echo "INFORMATION_NOTICE=TG" >> ${GITHUB_ENV}
        elif [[ -n "$(echo "${INFORMATION_NOTICE}" |grep -i 'PUSH\|pushplus')" ]]; then
          echo "INFORMATION_NOTICE=PUSH" >> ${GITHUB_ENV}
        else
          echo "INFORMATION_NOTICE=false" >> ${GITHUB_ENV}
        fi
        bash <(curl -fsSL https://raw.githubusercontent.com/281677160/common/ceshi/custom/first.sh)

    - name: 密匙检测（密匙为空则退出）
      shell: bash
      run: |
        cd ${GITHUB_WORKSPACE}
        source $COMMON_SH && Diy_menu1
branding:
  icon: "terminal"
  color: "gray-dark"
