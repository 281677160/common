name: 'My Composite Action'
description: 'Combines multiple steps with conditional messages and build information'
runs:
  using: "composite"
  steps:
    - name: 公告
      if: env.SendMessage != 'true'
      shell: bash
      run: |
        # 确保目录存在（避免空变量导致错误）
        HOME_PATH="${HOME_PATH:-.}"
        cd "$HOME_PATH"
        
        echo -e "\n\033[0;33m第一次使用本仓库，请不要直接拉取任何插件包。建议先通过 SSH 进入固件配置界面，确认脚本未包含所需插件后再单独拉取\033[0m"
        echo -e "\n\033[0;33m插件应按需单独拉取，避免一次性拉取整个插件包导致编译失败概率增加\033[0m"
        
        if [[ "${UPDATE_FIRMWARE_ONLINE}" == "true" ]]; then
          echo -e "\n\033[0;31mSSH 连接固件后，输入命令 'openwrt' 可进行修改后台 IP、清空密码、还原出厂设置和在线更新固件操作\033[0m"
        else
          echo -e "\n\033[0;31mSSH 连接固件后，输入命令 'openwrt' 可进行修改后台 IP、清空密码和还原出厂设置操作\033[0m"
        fi
        echo

    - name: 编译信息
      if: env.SendMessage == 'true'
      shell: bash
      run: |
        # 定义颜色函数（使用更规范的 shell 语法）
        TIME() {
          local Color=""
          case "$1" in
            r) Color="\033[0;31m" ;;
            g) Color="\033[0;32m" ;;
            y) Color="\033[0;33m" ;;
            b) Color="\033[0;34m" ;;
            z) Color="\033[0;35m" ;;
            l) Color="\033[0;36m" ;;
            *) Color="\033[0;0m" ;;
          esac
          echo -e "${Color}$2\033[0m"
        }

        # 标准化路径处理
        HOME_PATH="${HOME_PATH:-.}"
        cd "$HOME_PATH"
        
        # 提取插件信息（使用更健壮的 grep 模式）
        OUTPUT_FILE="/tmp/CONFIG_PACKAGE"
        > "$OUTPUT_FILE"  # 清空文件
        local counter=1
        grep -E '^CONFIG_PACKAGE_luci-(app|theme)-[^_]+=y$' "$HOME_PATH/.config" | while IFS='=' read -r line _; do
          local package_name="${line#CONFIG_PACKAGE_}"
          echo "TIME g \"${counter}、${package_name}\"" | sed 's/^/         /' >> "$OUTPUT_FILE"
          ((counter++))
        done

        # 输出编译信息（统一使用局部变量）
        echo
        TIME b "编译源码: ${SOURCE}"
        TIME b "源码链接: ${REPO_URL}"
        TIME b "源码分支: ${REPO_BRANCH}"
        TIME b "源码作者: ${SOURCE_OWNER}"
        TIME b "Luci 版本: ${LUCI_EDITION}"
        
        if [[ "${TARGET_PROFILE}" == "aarch_64" ]]; then
          TIME b "编译机型: aarch64 系列"
          if [[ "${PACKAGING_FIRMWARE}" == "true" ]]; then
            TIME g "打包机型: ${amlogic_model}"
            TIME g "打包内核: ${amlogic_kernel}"
            TIME g "分区数据: ${openwrt_size}"
            TIME g "自动检测最新内核: ${auto_kernel^}"  # 首字母大写显示
          else
            TIME b "内核版本: ${LINUX_KERNEL}"
            TIME r "自动打包: 未开启"
          fi
        else
          TIME b "内核版本: ${LINUX_KERNEL}"
          TIME b "编译机型: ${TARGET_PROFILE}"
        fi
        
        TIME b "固件作者: ${GIT_ACTOR}"
        TIME b "仓库地址: ${GITHUB_LINK}"
        
        if [[ -n "${ERRUN_NUMBER}" ]]; then
          TIME b "启动编号: 由 [#${ERRUN_NUMBER} 号 ${{ github.workflow }}] 触发，本流程编号 [${WAREHOUSE_MAN} 仓库 #${RUN_NUMBER} 号]"
        else
          TIME b "启动编号: #${RUN_NUMBER}（${WAREHOUSE_MAN} 仓库第 ${RUN_NUMBER} 次启动 ${{ github.workflow }} 流程）"
        fi
        
        TIME b "编译时间: $(date +%Y年%m月%d号%H时%M分)"
        TIME g "友情提示：当前使用【${FOLDER_NAME}】文件夹编译【${TARGET_PROFILE:-未知机型}】固件"
        echo
        
        # 状态开关统一格式
        TIME "$([[ ${INFORMATION_NOTICE} =~ TG|PUSH ]] && echo y || echo r)" "pushplus/Telegram 通知: ${INFORMATION_NOTICE:-关闭}"
        TIME "$([[ ${UPLOAD_FIRMWARE} == "true" ]] && echo y || echo r)" "上传固件到 GitHub Actions: ${UPLOAD_FIRMWARE}"
        TIME "$([[ ${UPLOAD_RELEASE} == "true" ]] && echo y || echo r)" "发布固件 (Release): ${UPLOAD_RELEASE}"
        TIME "$([[ ${CACHEWRTBUILD_SWITCH} == "true" ]] && echo y || echo r)" "缓存加速: ${CACHEWRTBUILD_SWITCH}"
        TIME "$([[ ${COMPILATION_INFORMATION} == "true" ]] && echo y || echo r)" "编译信息显示: ${COMPILATION_INFORMATION}"
        
        if [[ "${TARGET_BOARD}" =~ (armvirt|armsr) ]]; then
          TIME "$([[ ${PACKAGING_FIRMWARE} == "true" ]] && echo y || echo r)" "aarch64 固件自动打包为 .img: ${PACKAGING_FIRMWARE}"
        else
          TIME "$([[ ${UPDATE_FIRMWARE_ONLINE} == "true" ]] && echo y || echo r)" "定时自动更新插件: ${UPDATE_FIRMWARE_ONLINE}"
        fi
        
        if [[ "${UPDATE_FIRMWARE_ONLINE}" == "true" ]]; then
          echo
          TIME l "定时自动更新信息"
          TIME z "插件版本: ${AUTOUPDATE_VERSION}"
          
          if [[ ${TARGET_BOARD} == "x86" ]]; then
            TIME b "传统固件: ${AUTOBUILD_LEGACY}${FIRMWARE_SUFFIX}"
            [[ $(grep -q "CONFIG_GRUB_EFI_IMAGES=y" "$HOME_PATH/.config") ]] && TIME b "UEFI 固件: ${AUTOBUILD_UEFI}${FIRMWARE_SUFFIX}"
          else
            TIME b "固件名称: ${AUTOBUILD_FIRMWARE}${FIRMWARE_SUFFIX}"
          fi
          
          TIME b "固件后缀: ${FIRMWARE_SUFFIX}"
          TIME b "固件版本: ${FIRMWARE_VERSION}"
          TIME b "云端路径: ${GITHUB_RELEASE}"
          TIME g "注意：编译成功后自动发布固件到指定地址，云端路径随后生成"
          TIME g "普通发布与云端路径独立，无需普通发布可关闭相关功能"
          TIME g "修改网络配置或在线更新，请输入命令：openwrt"
          echo
        fi
        
        echo
        TIME z "系统空间使用情况"
        df -hT "$PWD"
        
        if [[ -f "/tmp/CONFIG_PACKAGE" ]]; then
          echo
          TIME r "已选插件列表"
          chmod +x "/tmp/CONFIG_PACKAGE"
          . "/tmp/CONFIG_PACKAGE"  # 安全加载文件（避免路径遍历）
          rm -f "/tmp/CONFIG_PACKAGE"  # 使用 -f 避免错误
          echo
        fi
  branding:
    icon: terminal
    color: gray-dark
