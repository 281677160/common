name: 'My Composite Action'
description: 'Combines multiple steps'
runs:
  using: "composite"
  steps:
    - name: 读取自定义文件
      shell: bash
      run: |
        cd $HOME_PATH
        $DIY_P1_SH
        ./scripts/feeds update -a > /dev/null 2>&1
        [ -d "$BUILD_PATCHES" ] && find "$BUILD_PATCHES" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 --forward --no-backup-if-mismatch"
        [ -d "$BUILD_DIY" ] && cp -Rf $BUILD_DIY/* $HOME_PATH
        [ -d "$BUILD_FILES" ] && cp -Rf $BUILD_FILES $HOME_PATH
        rm -rf $HOME_PATH/files/README
        mv $CONFIG_FILE $HOME_PATH/.config
        ./scripts/feeds install -a > /dev/null 2>&1
        ./scripts/feeds install -a
        $DIY_P2_SH
        make defconfig > /dev/null 2>&1
        TARGET_BOARD="$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' .config)"
        TARGET_SUBTARGET="$(awk -F '[="]+' '/TARGET_SUBTARGET/{print $2}' .config)"
        TARGET_PROFILE_DG="$(awk -F '[="]+' '/TARGET_PROFILE/{print $2}' .config)"
        if [[ -n "$(grep -Eo 'CONFIG_TARGET.*x86.*64.*=y' .config)" ]]; then
          TARGET_PROFILE="x86-64"
        elif [[ -n "$(grep -Eo 'CONFIG_TARGET.*x86.*=y' .config)" ]]; then
          TARGET_PROFILE="x86-32"
        elif [[ -n "$(grep -Eo 'CONFIG_TARGET.*DEVICE.*phicomm.*n1=y' .config)" ]]; then
          TARGET_PROFILE="phicomm_n1"
        elif [[ -n "$(grep -Eo 'CONFIG_TARGET.*armv8.*=y' .config)" ]]; then
          TARGET_PROFILE="aarch_64"
        elif [[ -n "$(grep -Eo 'CONFIG_TARGET.*armvirt.*64.*=y' .config)" ]]; then
          TARGET_PROFILE="aarch_64"
        elif [[ -n "$(grep -Eo 'CONFIG_TARGET.*DEVICE.*=y' .config)" ]]; then
          TARGET_PROFILE="$(grep -Eo "CONFIG_TARGET.*DEVICE.*=y" .config | sed -r 's/.*DEVICE_(.*)=y/\1/')"
        else
          TARGET_PROFILE="${TARGET_PROFILE_DG}"
        fi
        echo "DEVICE_NAME=${TARGET_PROFILE}" >> ${GITHUB_ENV}
        echo "BIN_TARGETS=${HOME_PATH}/bin_firmware" >> ${GITHUB_ENV}
        echo "FIRMWARE=${HOME_PATH}/bin/targets/${TARGET_BOARD}/${TARGET_SUBTARGET}" >> ${GITHUB_ENV}

    - name: 缓存加速
      if: env.CACHEWRTBUILD_SWITCH == 'true'
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: "${{ env.DEVICE_NAME }}"
        prefix: ${{ github.workspace }}/openwrt

    - name: 下载软件源
      shell: bash
      run: |
        cd $HOME_PATH
        make download -j8
        
branding:
  icon: "terminal"
  color: "gray-dark"
